from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
from aiogram.enums import ChatType
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import WebAppInfo
from aiogram import Bot
from aiogram.types import ForumTopic
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
bot = Bot(token="")
dp = Dispatcher()

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("start_cmd_–ü—Ä–∏–≤–µ—Ç!")

async def main():
    await dp.start_polling(bot)


def is_allowed_chat(message: types.Message) -> bool:
    return (
        message.chat.type == ChatType.PRIVATE or  # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message.message_thread_id is None or  # General (–Ω–µ —Ç–æ–ø–∏–∫)
        message.message_thread_id is not None  # –∏ —Ç–æ–ø–∏–∫ ----------------------–≤—Ä–µ–º–µ–Ω–Ω–æ
    )


#-------------------------------------------
from aiogram import Bot
from aiogram.types import ChatFullInfo
from aiogram.enums import ChatType
@dp.message(Command("chat_info"))
async def cmd_chat_info(message: types.Message):
    await print_full_chat_info(bot, message.chat.id)
async def print_full_chat_info(bot: Bot, chat_id: int):
    try:
        chat_info: ChatFullInfo = await bot.get_chat(chat_id)
        
        info = f"""
        üîç –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
        
        ID: {chat_info.id}
        –¢–∏–ø: {chat_info.type} ({ChatType(chat_info.type).name})
        –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info.title}
        –Æ–∑–µ—Ä–Ω–µ–π–º: @{chat_info.username if chat_info.username else 'N/A'}
        –û–ø–∏—Å–∞–Ω–∏–µ: {chat_info.description if chat_info.description else 'N/A'}
        
        üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {chat_info.members_count if hasattr(chat_info, 'members_count') else 'N/A'}
        
        
        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
        - –§–æ—Ä—É–º: {'–î–∞' if chat_info.is_forum else '–ù–µ—Ç'}
        - –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if chat_info.has_protected_content else '–í—ã–∫–ª—é—á–µ–Ω–∞'}
        - –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∞–¥–º–∏–Ω—ã: {'–î–∞' if chat_info.has_aggressive_anti_spam_enabled else '–ù–µ—Ç'}
        
        üåê –°–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:
        - –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç: {chat_info.linked_chat_id if chat_info.linked_chat_id else 'N/A'}
        
        
        üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {chat_info.birthdate if hasattr(chat_info, 'birthdate') else 'N/A'}
        –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞: {chat_info.emoji_status_custom_emoji_id or 'N/A'}
        """
        
        print(info)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
#-------------------------------------------


async def check_topics(bot: Bot, target_chat_id: int):
    existing_topics = []
    
    for thread_id in range(1, 301):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –æ—Ç 1 –¥–æ 300
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "—Ç–∏—Ö–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=target_chat_id,
                message_thread_id=thread_id,
                text="...",  # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                disable_notification=True
            )
            existing_topics.append(thread_id)
            print(f"–¢–æ–ø–∏–∫ {thread_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            
        except TelegramBadRequest as e:
            if "message thread not found" in str(e).lower():
                print(f"–¢–æ–ø–∏–∫ {thread_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                print(f"–û—à–∏–±–∫–∞ –¥–ª—è {thread_id}: {e}")
        
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
        
        await asyncio.sleep(0.01)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
    
    return existing_topics

@dp.message(Command("scan_topics"))
async def scan_topics(message: types.Message):
    target_chat_id = -1001471637496  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
    if message.chat.id != target_chat_id:
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ!")
    
    result = await check_topics(bot, target_chat_id)
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤: {len(result)}\nID: {result}")




"""
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç id –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è/–∑–∞–∫—Ä—ã—Ç–∏–ø—è 
–±–∞–Ω id —Ç–æ–ø–∏–∫–∞ && id —á–∞—Ç–∞ 

"""



#----------------------------Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
def get_reply_kb():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ö–Ω–æ–ø–∫–∞ 1")
    builder.button(text="–ö–Ω–æ–ø–∫–∞ 2")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("keyboard"), is_allowed_chat)
async def kb_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=get_reply_kb())

#----------------------------inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
def get_inline_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="btn_press")
    return builder.as_markup()

@dp.callback_query(lambda c: c.data == "btn_press")
async def process_callback(callback: types.CallbackQuery):
    await callback.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É!", show_alert=True)

@dp.message(Command("inline"), is_allowed_chat)
async def show_inline_kb(message: types.Message):
    await message.answer("–ü—Ä–∏–º–µ—Ä inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", reply_markup=get_inline_kb())


#----------------------------–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–ø–æ —Å—Å—ã–ª–∫–µ:
@dp.message(Command("photo"), is_allowed_chat)
async def send_photo(message: types.Message):
    await message.answer_photo(
        photo="https://images.app.goo.gl/iTFdnTdK4SNGNwHMA",
        caption="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–≤–æ—á–∫–∏-–≥–∏—Ç–ª–µ—Ä–∞ –≤–∑—è—Ç–æ–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –∞–º–∏–Ω–æ"
    )
#----------------------------Web App:

def get_game_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üéÆ –ò–≥—Ä–∞—Ç—å", 
        web_app=WebAppInfo(url="https://island-purring-butterkase.glitch.me/")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π –∏–≥—Ä—ã
    )
    return builder.as_markup()

    
@dp.message(Command("hi"), is_allowed_chat)
async def hi(message: types.Message):
    await message.answer("hi")

@dp.message(Command("get_thread_id"))
async def get_thread_id(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ø–∏–∫–∞ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫–µ)
    thread_id = message.message_thread_id
    chat_id = message.chat.id  
    if thread_id:
        await message.reply(f"ID —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞: {thread_id} –≤ —á–∞—Ç–µ —Å id {chat_id}")
    else:
        await message.reply("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ç–æ–ø–∏–∫–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –Ω—É–∂–Ω–æ–º –ø–æ–¥—á–∞—Ç–µ.")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
@dp.message(Command("game"), is_allowed_chat)
async def cmd_game(message: types.Message):
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É:",
        reply_markup=get_game_keyboard()
    )

if __name__ == "__main__":
    asyncio.run(main())
